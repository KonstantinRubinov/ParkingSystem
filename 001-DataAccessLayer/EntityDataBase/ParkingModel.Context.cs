//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParkingSystem.EntityDataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Entity.Validation;
    using System.Diagnostics;

    public partial class ParkingEntities : DbContext
    {
        public ParkingEntities() : base("name=ParkingEntities")
        {
        }

		public override int SaveChanges()
		{
			try
			{
				return base.SaveChanges();
			}
			catch (DbEntityValidationException ex)
			{
				// Retrieve the error messages as a list of strings.
				var errorMessages = ex.EntityValidationErrors
						.SelectMany(x => x.ValidationErrors)
						.Select(x => x.ErrorMessage);

				// Join the list to a single string.
				var fullErrorMessage = string.Join("; ", errorMessages);
				Debug.WriteLine("DbEntityValidationException: " + errorMessages);
				throw new DbEntityValidationException(fullErrorMessage, ex.EntityValidationErrors);
			}
		}

		protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<APPROVAL> APPROVALS { get; set; }
        public virtual DbSet<APPROVALTYPE> APPROVALTYPES { get; set; }
        public virtual DbSet<BeforeCellphone> BeforeCellphones { get; set; }
        public virtual DbSet<BeforeTelephone> BeforeTelephones { get; set; }
        public virtual DbSet<COURS> COURSES { get; set; }
        public virtual DbSet<FACULTY> FACULTYS { get; set; }
        public virtual DbSet<PERSON> PERSONS { get; set; }
        public virtual DbSet<STUDENT> STUDENTS { get; set; }
        public virtual DbSet<TEACHER> TEACHERS { get; set; }
        public virtual DbSet<VEHICLE> VEHICLES { get; set; }
    
        public virtual ObjectResult<AddApproval_Result> AddApproval(string approvalCode, Nullable<System.DateTime> approvalFrom, Nullable<System.DateTime> approvalUntil, string approvalPersonId)
        {
            var approvalCodeParameter = approvalCode != null ?
                new ObjectParameter("approvalCode", approvalCode) :
                new ObjectParameter("approvalCode", typeof(string));
    
            var approvalFromParameter = approvalFrom.HasValue ?
                new ObjectParameter("approvalFrom", approvalFrom) :
                new ObjectParameter("approvalFrom", typeof(System.DateTime));
    
            var approvalUntilParameter = approvalUntil.HasValue ?
                new ObjectParameter("approvalUntil", approvalUntil) :
                new ObjectParameter("approvalUntil", typeof(System.DateTime));
    
            var approvalPersonIdParameter = approvalPersonId != null ?
                new ObjectParameter("approvalPersonId", approvalPersonId) :
                new ObjectParameter("approvalPersonId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddApproval_Result>("AddApproval", approvalCodeParameter, approvalFromParameter, approvalUntilParameter, approvalPersonIdParameter);
        }
    
        public virtual ObjectResult<AddApprovalType_Result> AddApprovalType(string approvalCode, string approvalName)
        {
            var approvalCodeParameter = approvalCode != null ?
                new ObjectParameter("approvalCode", approvalCode) :
                new ObjectParameter("approvalCode", typeof(string));
    
            var approvalNameParameter = approvalName != null ?
                new ObjectParameter("approvalName", approvalName) :
                new ObjectParameter("approvalName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddApprovalType_Result>("AddApprovalType", approvalCodeParameter, approvalNameParameter);
        }
    
        public virtual ObjectResult<string> AddCellphone(string beforeCellphone)
        {
            var beforeCellphoneParameter = beforeCellphone != null ?
                new ObjectParameter("beforeCellphone", beforeCellphone) :
                new ObjectParameter("beforeCellphone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddCellphone", beforeCellphoneParameter);
        }
    
        public virtual ObjectResult<AddCourse_Result> AddCourse(string courseCode, string courseName)
        {
            var courseCodeParameter = courseCode != null ?
                new ObjectParameter("courseCode", courseCode) :
                new ObjectParameter("courseCode", typeof(string));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddCourse_Result>("AddCourse", courseCodeParameter, courseNameParameter);
        }
    
        public virtual ObjectResult<AddFaculty_Result> AddFaculty(string facultyCode, string facultyName, string facultyHead)
        {
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("facultyCode", facultyCode) :
                new ObjectParameter("facultyCode", typeof(string));
    
            var facultyNameParameter = facultyName != null ?
                new ObjectParameter("facultyName", facultyName) :
                new ObjectParameter("facultyName", typeof(string));
    
            var facultyHeadParameter = facultyHead != null ?
                new ObjectParameter("facultyHead", facultyHead) :
                new ObjectParameter("facultyHead", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddFaculty_Result>("AddFaculty", facultyCodeParameter, facultyNameParameter, facultyHeadParameter);
        }
    
        public virtual ObjectResult<AddStudent_Result> AddStudent(string personId, string personFirstName, string personLastName, string personBeforeTelephone, string personTelephone, string personBeforeCellphone, string personCellphone, Nullable<int> personCode, string studentId, string studentFacultyCode, Nullable<int> studentYear, Nullable<int> studentType)
        {
            var personIdParameter = personId != null ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(string));
    
            var personFirstNameParameter = personFirstName != null ?
                new ObjectParameter("personFirstName", personFirstName) :
                new ObjectParameter("personFirstName", typeof(string));
    
            var personLastNameParameter = personLastName != null ?
                new ObjectParameter("personLastName", personLastName) :
                new ObjectParameter("personLastName", typeof(string));
    
            var personBeforeTelephoneParameter = personBeforeTelephone != null ?
                new ObjectParameter("personBeforeTelephone", personBeforeTelephone) :
                new ObjectParameter("personBeforeTelephone", typeof(string));
    
            var personTelephoneParameter = personTelephone != null ?
                new ObjectParameter("personTelephone", personTelephone) :
                new ObjectParameter("personTelephone", typeof(string));
    
            var personBeforeCellphoneParameter = personBeforeCellphone != null ?
                new ObjectParameter("personBeforeCellphone", personBeforeCellphone) :
                new ObjectParameter("personBeforeCellphone", typeof(string));
    
            var personCellphoneParameter = personCellphone != null ?
                new ObjectParameter("personCellphone", personCellphone) :
                new ObjectParameter("personCellphone", typeof(string));
    
            var personCodeParameter = personCode.HasValue ?
                new ObjectParameter("personCode", personCode) :
                new ObjectParameter("personCode", typeof(int));
    
            var studentIdParameter = studentId != null ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(string));
    
            var studentFacultyCodeParameter = studentFacultyCode != null ?
                new ObjectParameter("studentFacultyCode", studentFacultyCode) :
                new ObjectParameter("studentFacultyCode", typeof(string));
    
            var studentYearParameter = studentYear.HasValue ?
                new ObjectParameter("studentYear", studentYear) :
                new ObjectParameter("studentYear", typeof(int));
    
            var studentTypeParameter = studentType.HasValue ?
                new ObjectParameter("studentType", studentType) :
                new ObjectParameter("studentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddStudent_Result>("AddStudent", personIdParameter, personFirstNameParameter, personLastNameParameter, personBeforeTelephoneParameter, personTelephoneParameter, personBeforeCellphoneParameter, personCellphoneParameter, personCodeParameter, studentIdParameter, studentFacultyCodeParameter, studentYearParameter, studentTypeParameter);
        }
    
        public virtual ObjectResult<AddTeacher_Result> AddTeacher(string personId, string personFirstName, string personLastName, string personBeforeTelephone, string personTelephone, string personBeforeCellphone, string personCellphone, Nullable<int> personCode, string teacherId, string teacherFacultyCode, Nullable<int> teacherStage)
        {
            var personIdParameter = personId != null ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(string));
    
            var personFirstNameParameter = personFirstName != null ?
                new ObjectParameter("personFirstName", personFirstName) :
                new ObjectParameter("personFirstName", typeof(string));
    
            var personLastNameParameter = personLastName != null ?
                new ObjectParameter("personLastName", personLastName) :
                new ObjectParameter("personLastName", typeof(string));
    
            var personBeforeTelephoneParameter = personBeforeTelephone != null ?
                new ObjectParameter("personBeforeTelephone", personBeforeTelephone) :
                new ObjectParameter("personBeforeTelephone", typeof(string));
    
            var personTelephoneParameter = personTelephone != null ?
                new ObjectParameter("personTelephone", personTelephone) :
                new ObjectParameter("personTelephone", typeof(string));
    
            var personBeforeCellphoneParameter = personBeforeCellphone != null ?
                new ObjectParameter("personBeforeCellphone", personBeforeCellphone) :
                new ObjectParameter("personBeforeCellphone", typeof(string));
    
            var personCellphoneParameter = personCellphone != null ?
                new ObjectParameter("personCellphone", personCellphone) :
                new ObjectParameter("personCellphone", typeof(string));
    
            var personCodeParameter = personCode.HasValue ?
                new ObjectParameter("personCode", personCode) :
                new ObjectParameter("personCode", typeof(int));
    
            var teacherIdParameter = teacherId != null ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(string));
    
            var teacherFacultyCodeParameter = teacherFacultyCode != null ?
                new ObjectParameter("teacherFacultyCode", teacherFacultyCode) :
                new ObjectParameter("teacherFacultyCode", typeof(string));
    
            var teacherStageParameter = teacherStage.HasValue ?
                new ObjectParameter("teacherStage", teacherStage) :
                new ObjectParameter("teacherStage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddTeacher_Result>("AddTeacher", personIdParameter, personFirstNameParameter, personLastNameParameter, personBeforeTelephoneParameter, personTelephoneParameter, personBeforeCellphoneParameter, personCellphoneParameter, personCodeParameter, teacherIdParameter, teacherFacultyCodeParameter, teacherStageParameter);
        }
    
        public virtual ObjectResult<string> AddTelephone(string beforeTelephone)
        {
            var beforeTelephoneParameter = beforeTelephone != null ?
                new ObjectParameter("beforeTelephone", beforeTelephone) :
                new ObjectParameter("beforeTelephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddTelephone", beforeTelephoneParameter);
        }
    
        public virtual ObjectResult<AddVehicle_Result> AddVehicle(string vehicleNumber, string vehicleManufacturer, string vehicleColor, string vehicleOwnerId)
        {
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("vehicleNumber", vehicleNumber) :
                new ObjectParameter("vehicleNumber", typeof(string));
    
            var vehicleManufacturerParameter = vehicleManufacturer != null ?
                new ObjectParameter("vehicleManufacturer", vehicleManufacturer) :
                new ObjectParameter("vehicleManufacturer", typeof(string));
    
            var vehicleColorParameter = vehicleColor != null ?
                new ObjectParameter("vehicleColor", vehicleColor) :
                new ObjectParameter("vehicleColor", typeof(string));
    
            var vehicleOwnerIdParameter = vehicleOwnerId != null ?
                new ObjectParameter("vehicleOwnerId", vehicleOwnerId) :
                new ObjectParameter("vehicleOwnerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddVehicle_Result>("AddVehicle", vehicleNumberParameter, vehicleManufacturerParameter, vehicleColorParameter, vehicleOwnerIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> checkIfIdExists(string personId)
        {
            var personIdParameter = personId != null ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkIfIdExists", personIdParameter);
        }
    
        public virtual int DeleteApprovalByNumber(Nullable<int> approvalNumber)
        {
            var approvalNumberParameter = approvalNumber.HasValue ?
                new ObjectParameter("approvalNumber", approvalNumber) :
                new ObjectParameter("approvalNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApprovalByNumber", approvalNumberParameter);
        }
    
        public virtual int DeleteApprovalByPerson(string approvalPersonId)
        {
            var approvalPersonIdParameter = approvalPersonId != null ?
                new ObjectParameter("approvalPersonId", approvalPersonId) :
                new ObjectParameter("approvalPersonId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApprovalByPerson", approvalPersonIdParameter);
        }
    
        public virtual int DeleteApprovalType(string approvalCode)
        {
            var approvalCodeParameter = approvalCode != null ?
                new ObjectParameter("approvalCode", approvalCode) :
                new ObjectParameter("approvalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApprovalType", approvalCodeParameter);
        }
    
        public virtual int DeleteCellphone(string beforeCellphone)
        {
            var beforeCellphoneParameter = beforeCellphone != null ?
                new ObjectParameter("beforeCellphone", beforeCellphone) :
                new ObjectParameter("beforeCellphone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCellphone", beforeCellphoneParameter);
        }
    
        public virtual int DeleteCourse(string courseCode)
        {
            var courseCodeParameter = courseCode != null ?
                new ObjectParameter("courseCode", courseCode) :
                new ObjectParameter("courseCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourse", courseCodeParameter);
        }
    
        public virtual int DeleteFaculty(string facultyCode)
        {
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("facultyCode", facultyCode) :
                new ObjectParameter("facultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFaculty", facultyCodeParameter);
        }
    
        public virtual int DeletePerson(string personId)
        {
            var personIdParameter = personId != null ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePerson", personIdParameter);
        }
    
        public virtual int DeleteStudent(string studentId)
        {
            var studentIdParameter = studentId != null ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", studentIdParameter);
        }
    
        public virtual int DeleteTeacher(string teacherId)
        {
            var teacherIdParameter = teacherId != null ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTeacher", teacherIdParameter);
        }
    
        public virtual int DeleteTelephone(string beforeTelephone)
        {
            var beforeTelephoneParameter = beforeTelephone != null ?
                new ObjectParameter("beforeTelephone", beforeTelephone) :
                new ObjectParameter("beforeTelephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTelephone", beforeTelephoneParameter);
        }
    
        public virtual int DeleteVehicleByNumber(string vehicleNumber)
        {
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("vehicleNumber", vehicleNumber) :
                new ObjectParameter("vehicleNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVehicleByNumber", vehicleNumberParameter);
        }
    
        public virtual int DeleteVehicleByOwnerId(string vehicleOwnerId)
        {
            var vehicleOwnerIdParameter = vehicleOwnerId != null ?
                new ObjectParameter("vehicleOwnerId", vehicleOwnerId) :
                new ObjectParameter("vehicleOwnerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVehicleByOwnerId", vehicleOwnerIdParameter);
        }
    
        public virtual ObjectResult<GetAllApprovals_Result> GetAllApprovals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllApprovals_Result>("GetAllApprovals");
        }
    
        public virtual ObjectResult<GetAllApprovalTypes_Result> GetAllApprovalTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllApprovalTypes_Result>("GetAllApprovalTypes");
        }
    
        public virtual ObjectResult<string> GetAllCellphones()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllCellphones");
        }
    
        public virtual ObjectResult<GetAllCourses_Result> GetAllCourses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCourses_Result>("GetAllCourses");
        }
    
        public virtual ObjectResult<GetAllFaculties_Result> GetAllFaculties()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFaculties_Result>("GetAllFaculties");
        }
    
        public virtual ObjectResult<GetAllPersons_Result> GetAllPersons()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPersons_Result>("GetAllPersons");
        }
    
        public virtual ObjectResult<string> GetAllPersonsId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllPersonsId");
        }
    
        public virtual ObjectResult<GetAllStudents_Result> GetAllStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStudents_Result>("GetAllStudents");
        }
    
        public virtual ObjectResult<GetAllTeachers_Result> GetAllTeachers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTeachers_Result>("GetAllTeachers");
        }
    
        public virtual ObjectResult<string> GetAllTelephones()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllTelephones");
        }
    
        public virtual ObjectResult<string> GetAllVehicleNumbers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllVehicleNumbers");
        }
    
        public virtual ObjectResult<GetAllVehicles_Result> GetAllVehicles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllVehicles_Result>("GetAllVehicles");
        }
    
        public virtual ObjectResult<GetOneApprovalByCode_Result> GetOneApprovalByCode(string approvalCode)
        {
            var approvalCodeParameter = approvalCode != null ?
                new ObjectParameter("approvalCode", approvalCode) :
                new ObjectParameter("approvalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneApprovalByCode_Result>("GetOneApprovalByCode", approvalCodeParameter);
        }
    
        public virtual ObjectResult<GetOneApprovalByNumber_Result> GetOneApprovalByNumber(Nullable<int> approvalNumber)
        {
            var approvalNumberParameter = approvalNumber.HasValue ?
                new ObjectParameter("approvalNumber", approvalNumber) :
                new ObjectParameter("approvalNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneApprovalByNumber_Result>("GetOneApprovalByNumber", approvalNumberParameter);
        }
    
        public virtual ObjectResult<GetOneApprovalByPersonId_Result> GetOneApprovalByPersonId(string approvalPersonId)
        {
            var approvalPersonIdParameter = approvalPersonId != null ?
                new ObjectParameter("approvalPersonId", approvalPersonId) :
                new ObjectParameter("approvalPersonId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneApprovalByPersonId_Result>("GetOneApprovalByPersonId", approvalPersonIdParameter);
        }
    
        public virtual ObjectResult<GetOneApprovalTypeByCode_Result> GetOneApprovalTypeByCode(string approvalCode)
        {
            var approvalCodeParameter = approvalCode != null ?
                new ObjectParameter("approvalCode", approvalCode) :
                new ObjectParameter("approvalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneApprovalTypeByCode_Result>("GetOneApprovalTypeByCode", approvalCodeParameter);
        }
    
        public virtual ObjectResult<GetOneApprovalTypeByName_Result> GetOneApprovalTypeByName(string approvalName)
        {
            var approvalNameParameter = approvalName != null ?
                new ObjectParameter("approvalName", approvalName) :
                new ObjectParameter("approvalName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneApprovalTypeByName_Result>("GetOneApprovalTypeByName", approvalNameParameter);
        }
    
        public virtual ObjectResult<string> GetOneBeforeCellphone(string beforeCellphone)
        {
            var beforeCellphoneParameter = beforeCellphone != null ?
                new ObjectParameter("beforeCellphone", beforeCellphone) :
                new ObjectParameter("beforeCellphone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetOneBeforeCellphone", beforeCellphoneParameter);
        }
    
        public virtual ObjectResult<string> GetOneBeforeTelephone(string beforeTelephone)
        {
            var beforeTelephoneParameter = beforeTelephone != null ?
                new ObjectParameter("beforeTelephone", beforeTelephone) :
                new ObjectParameter("beforeTelephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetOneBeforeTelephone", beforeTelephoneParameter);
        }
    
        public virtual ObjectResult<GetOneCourseByCode_Result> GetOneCourseByCode(string courseCode)
        {
            var courseCodeParameter = courseCode != null ?
                new ObjectParameter("courseCode", courseCode) :
                new ObjectParameter("courseCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneCourseByCode_Result>("GetOneCourseByCode", courseCodeParameter);
        }
    
        public virtual ObjectResult<GetOneCourseByName_Result> GetOneCourseByName(string courseName)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneCourseByName_Result>("GetOneCourseByName", courseNameParameter);
        }
    
        public virtual ObjectResult<GetOneFacultyByCode_Result> GetOneFacultyByCode(string facultyCode)
        {
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("facultyCode", facultyCode) :
                new ObjectParameter("facultyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneFacultyByCode_Result>("GetOneFacultyByCode", facultyCodeParameter);
        }
    
        public virtual ObjectResult<GetOneFacultyByHead_Result> GetOneFacultyByHead(string facultyHead)
        {
            var facultyHeadParameter = facultyHead != null ?
                new ObjectParameter("facultyHead", facultyHead) :
                new ObjectParameter("facultyHead", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneFacultyByHead_Result>("GetOneFacultyByHead", facultyHeadParameter);
        }
    
        public virtual ObjectResult<GetOneFacultyByName_Result> GetOneFacultyByName(string facultyName)
        {
            var facultyNameParameter = facultyName != null ?
                new ObjectParameter("facultyName", facultyName) :
                new ObjectParameter("facultyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneFacultyByName_Result>("GetOneFacultyByName", facultyNameParameter);
        }
    
        public virtual ObjectResult<GetOnePersonById_Result> GetOnePersonById(string personId)
        {
            var personIdParameter = personId != null ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOnePersonById_Result>("GetOnePersonById", personIdParameter);
        }
    
        public virtual ObjectResult<GetOneStudentById_Result> GetOneStudentById(string studentId)
        {
            var studentIdParameter = studentId != null ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneStudentById_Result>("GetOneStudentById", studentIdParameter);
        }
    
        public virtual ObjectResult<GetOneTeacherById_Result> GetOneTeacherById(string teacherId)
        {
            var teacherIdParameter = teacherId != null ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneTeacherById_Result>("GetOneTeacherById", teacherIdParameter);
        }
    
        public virtual ObjectResult<GetOneVehicleByNumber_Result> GetOneVehicleByNumber(string vehicleNumber)
        {
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("vehicleNumber", vehicleNumber) :
                new ObjectParameter("vehicleNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneVehicleByNumber_Result>("GetOneVehicleByNumber", vehicleNumberParameter);
        }
    
        public virtual ObjectResult<GetOneVehicleByOwnerId_Result> GetOneVehicleByOwnerId(string vehicleOwnerId)
        {
            var vehicleOwnerIdParameter = vehicleOwnerId != null ?
                new ObjectParameter("vehicleOwnerId", vehicleOwnerId) :
                new ObjectParameter("vehicleOwnerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneVehicleByOwnerId_Result>("GetOneVehicleByOwnerId", vehicleOwnerIdParameter);
        }
    
        public virtual ObjectResult<UpdateApproval_Result> UpdateApproval(string approvalCode, Nullable<System.DateTime> approvalFrom, Nullable<System.DateTime> approvalUntil, string approvalPersonId, Nullable<int> approvalNumber)
        {
            var approvalCodeParameter = approvalCode != null ?
                new ObjectParameter("approvalCode", approvalCode) :
                new ObjectParameter("approvalCode", typeof(string));
    
            var approvalFromParameter = approvalFrom.HasValue ?
                new ObjectParameter("approvalFrom", approvalFrom) :
                new ObjectParameter("approvalFrom", typeof(System.DateTime));
    
            var approvalUntilParameter = approvalUntil.HasValue ?
                new ObjectParameter("approvalUntil", approvalUntil) :
                new ObjectParameter("approvalUntil", typeof(System.DateTime));
    
            var approvalPersonIdParameter = approvalPersonId != null ?
                new ObjectParameter("approvalPersonId", approvalPersonId) :
                new ObjectParameter("approvalPersonId", typeof(string));
    
            var approvalNumberParameter = approvalNumber.HasValue ?
                new ObjectParameter("approvalNumber", approvalNumber) :
                new ObjectParameter("approvalNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateApproval_Result>("UpdateApproval", approvalCodeParameter, approvalFromParameter, approvalUntilParameter, approvalPersonIdParameter, approvalNumberParameter);
        }
    
        public virtual ObjectResult<UpdateApprovalType_Result> UpdateApprovalType(string approvalCode, string approvalName)
        {
            var approvalCodeParameter = approvalCode != null ?
                new ObjectParameter("approvalCode", approvalCode) :
                new ObjectParameter("approvalCode", typeof(string));
    
            var approvalNameParameter = approvalName != null ?
                new ObjectParameter("approvalName", approvalName) :
                new ObjectParameter("approvalName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateApprovalType_Result>("UpdateApprovalType", approvalCodeParameter, approvalNameParameter);
        }
    
        public virtual ObjectResult<string> UpdateCellphone(string beforeCellphone)
        {
            var beforeCellphoneParameter = beforeCellphone != null ?
                new ObjectParameter("beforeCellphone", beforeCellphone) :
                new ObjectParameter("beforeCellphone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateCellphone", beforeCellphoneParameter);
        }
    
        public virtual ObjectResult<UpdateCourse_Result> UpdateCourse(string courseCode, string courseName)
        {
            var courseCodeParameter = courseCode != null ?
                new ObjectParameter("courseCode", courseCode) :
                new ObjectParameter("courseCode", typeof(string));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCourse_Result>("UpdateCourse", courseCodeParameter, courseNameParameter);
        }
    
        public virtual ObjectResult<UpdateFaculty_Result> UpdateFaculty(string facultyCode, string facultyName, string facultyHead)
        {
            var facultyCodeParameter = facultyCode != null ?
                new ObjectParameter("facultyCode", facultyCode) :
                new ObjectParameter("facultyCode", typeof(string));
    
            var facultyNameParameter = facultyName != null ?
                new ObjectParameter("facultyName", facultyName) :
                new ObjectParameter("facultyName", typeof(string));
    
            var facultyHeadParameter = facultyHead != null ?
                new ObjectParameter("facultyHead", facultyHead) :
                new ObjectParameter("facultyHead", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateFaculty_Result>("UpdateFaculty", facultyCodeParameter, facultyNameParameter, facultyHeadParameter);
        }
    
        public virtual ObjectResult<UpdateStudent_Result> UpdateStudent(string personId, string personFirstName, string personLastName, string personBeforeTelephone, string personTelephone, string personBeforeCellphone, string personCellphone, Nullable<int> personCode, string studentId, string studentFacultyCode, Nullable<int> studentYear, Nullable<int> studentType)
        {
            var personIdParameter = personId != null ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(string));
    
            var personFirstNameParameter = personFirstName != null ?
                new ObjectParameter("personFirstName", personFirstName) :
                new ObjectParameter("personFirstName", typeof(string));
    
            var personLastNameParameter = personLastName != null ?
                new ObjectParameter("personLastName", personLastName) :
                new ObjectParameter("personLastName", typeof(string));
    
            var personBeforeTelephoneParameter = personBeforeTelephone != null ?
                new ObjectParameter("personBeforeTelephone", personBeforeTelephone) :
                new ObjectParameter("personBeforeTelephone", typeof(string));
    
            var personTelephoneParameter = personTelephone != null ?
                new ObjectParameter("personTelephone", personTelephone) :
                new ObjectParameter("personTelephone", typeof(string));
    
            var personBeforeCellphoneParameter = personBeforeCellphone != null ?
                new ObjectParameter("personBeforeCellphone", personBeforeCellphone) :
                new ObjectParameter("personBeforeCellphone", typeof(string));
    
            var personCellphoneParameter = personCellphone != null ?
                new ObjectParameter("personCellphone", personCellphone) :
                new ObjectParameter("personCellphone", typeof(string));
    
            var personCodeParameter = personCode.HasValue ?
                new ObjectParameter("personCode", personCode) :
                new ObjectParameter("personCode", typeof(int));
    
            var studentIdParameter = studentId != null ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(string));
    
            var studentFacultyCodeParameter = studentFacultyCode != null ?
                new ObjectParameter("studentFacultyCode", studentFacultyCode) :
                new ObjectParameter("studentFacultyCode", typeof(string));
    
            var studentYearParameter = studentYear.HasValue ?
                new ObjectParameter("studentYear", studentYear) :
                new ObjectParameter("studentYear", typeof(int));
    
            var studentTypeParameter = studentType.HasValue ?
                new ObjectParameter("studentType", studentType) :
                new ObjectParameter("studentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateStudent_Result>("UpdateStudent", personIdParameter, personFirstNameParameter, personLastNameParameter, personBeforeTelephoneParameter, personTelephoneParameter, personBeforeCellphoneParameter, personCellphoneParameter, personCodeParameter, studentIdParameter, studentFacultyCodeParameter, studentYearParameter, studentTypeParameter);
        }
    
        public virtual ObjectResult<UpdateTeacher_Result> UpdateTeacher(string personId, string personFirstName, string personLastName, string personBeforeTelephone, string personTelephone, string personBeforeCellphone, string personCellphone, Nullable<int> personCode, string teacherId, string teacherFacultyCode, Nullable<int> teacherStage)
        {
            var personIdParameter = personId != null ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(string));
    
            var personFirstNameParameter = personFirstName != null ?
                new ObjectParameter("personFirstName", personFirstName) :
                new ObjectParameter("personFirstName", typeof(string));
    
            var personLastNameParameter = personLastName != null ?
                new ObjectParameter("personLastName", personLastName) :
                new ObjectParameter("personLastName", typeof(string));
    
            var personBeforeTelephoneParameter = personBeforeTelephone != null ?
                new ObjectParameter("personBeforeTelephone", personBeforeTelephone) :
                new ObjectParameter("personBeforeTelephone", typeof(string));
    
            var personTelephoneParameter = personTelephone != null ?
                new ObjectParameter("personTelephone", personTelephone) :
                new ObjectParameter("personTelephone", typeof(string));
    
            var personBeforeCellphoneParameter = personBeforeCellphone != null ?
                new ObjectParameter("personBeforeCellphone", personBeforeCellphone) :
                new ObjectParameter("personBeforeCellphone", typeof(string));
    
            var personCellphoneParameter = personCellphone != null ?
                new ObjectParameter("personCellphone", personCellphone) :
                new ObjectParameter("personCellphone", typeof(string));
    
            var personCodeParameter = personCode.HasValue ?
                new ObjectParameter("personCode", personCode) :
                new ObjectParameter("personCode", typeof(int));
    
            var teacherIdParameter = teacherId != null ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(string));
    
            var teacherFacultyCodeParameter = teacherFacultyCode != null ?
                new ObjectParameter("teacherFacultyCode", teacherFacultyCode) :
                new ObjectParameter("teacherFacultyCode", typeof(string));
    
            var teacherStageParameter = teacherStage.HasValue ?
                new ObjectParameter("teacherStage", teacherStage) :
                new ObjectParameter("teacherStage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateTeacher_Result>("UpdateTeacher", personIdParameter, personFirstNameParameter, personLastNameParameter, personBeforeTelephoneParameter, personTelephoneParameter, personBeforeCellphoneParameter, personCellphoneParameter, personCodeParameter, teacherIdParameter, teacherFacultyCodeParameter, teacherStageParameter);
        }
    
        public virtual ObjectResult<string> UpdateTelephone(string beforeTelephone)
        {
            var beforeTelephoneParameter = beforeTelephone != null ?
                new ObjectParameter("beforeTelephone", beforeTelephone) :
                new ObjectParameter("beforeTelephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateTelephone", beforeTelephoneParameter);
        }
    
        public virtual ObjectResult<UpdateVehicle_Result> UpdateVehicle(string vehicleNumber, string vehicleManufacturer, string vehicleColor, string vehicleOwnerId)
        {
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("vehicleNumber", vehicleNumber) :
                new ObjectParameter("vehicleNumber", typeof(string));
    
            var vehicleManufacturerParameter = vehicleManufacturer != null ?
                new ObjectParameter("vehicleManufacturer", vehicleManufacturer) :
                new ObjectParameter("vehicleManufacturer", typeof(string));
    
            var vehicleColorParameter = vehicleColor != null ?
                new ObjectParameter("vehicleColor", vehicleColor) :
                new ObjectParameter("vehicleColor", typeof(string));
    
            var vehicleOwnerIdParameter = vehicleOwnerId != null ?
                new ObjectParameter("vehicleOwnerId", vehicleOwnerId) :
                new ObjectParameter("vehicleOwnerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateVehicle_Result>("UpdateVehicle", vehicleNumberParameter, vehicleManufacturerParameter, vehicleColorParameter, vehicleOwnerIdParameter);
        }
    }
}
